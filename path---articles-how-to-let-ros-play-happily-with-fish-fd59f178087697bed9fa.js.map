{"version":3,"sources":["webpack:///path---articles-how-to-let-ros-play-happily-with-fish-fd59f178087697bed9fa.js","webpack:///./.cache/json/articles-how-to-let-ros-play-happily-with-fish.json"],"names":["webpackJsonp","429","module","exports","data","site","siteMetadata","title","subtitle","author","name","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","date","frontmatter","tags","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,2DAAAC,QAAsGC,KAAA,eAAqBC,gBAAA,GAAAC,IAAA,wBAAmDC,gBAAmBC,GAAA,gKAAAC,KAAA,8mHAAmnGC,QAA2wBC,UAAA,4BAAAC,KAAA,4BAA0EC,aAAgBZ,MAAA,wCAAAa,MAAA,cAAAF,KAAA,2BAAAG,YAAA,0CAA+JC,aAAgBC,KAAA","file":"path---articles-how-to-let-ros-play-happily-with-fish-fd59f178087697bed9fa.js","sourcesContent":["webpackJsonp([62247893990589],{\n\n/***/ 429:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Yanda's Lab\",\"subtitle\":\"The existence of this blog fills you with determination.\",\"author\":{\"name\":\"Yanda Huang\"},\"disqusShortname\":\"\",\"url\":\"https://yanda.rocks\"}},\"markdownRemark\":{\"id\":\"/home/yanda/Development/yodahuang.github.io/src/pages/articles/2017-11-20---How-to-let-ROS-play-happily-with-fish/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><code class=\\\"language-text\\\">ROS</code> is a common platform for robot development. Normally it has some descent document, but not for <a href=\\\"http://wiki.ros.org/rosbash\\\">rosbash</a>. It is stated in the document that</p>\\n<blockquote>\\n<p>The <code class=\\\"language-text\\\">rosbash</code> package includes limited support for <code class=\\\"language-text\\\">zsh</code> and <code class=\\\"language-text\\\">tcsh</code> by way of sourcing the <code class=\\\"language-text\\\">roszsh</code> or <code class=\\\"language-text\\\">rostcsh</code> files respectively. We currently do not provide documentation on these shells, though much of the functionality is similar to the bash shell extensions.</p>\\n</blockquote>\\n<p>What if I want to use <a href=\\\"https://fishshell.com\\\">fish shell</a> instead of <code class=\\\"language-text\\\">bash</code>?  There is a file called <code class=\\\"language-text\\\">rosfish</code> <a href=\\\"https://github.com/ros/ros/blob/lunar-devel/tools/rosbash/rosfish\\\">in Github</a> but how to use that?</p>\\n<h2>Getting functionalities such as <code class=\\\"language-text\\\">roscd</code> and <code class=\\\"language-text\\\">rosed</code></h2>\\n<p>Instead of sourcing <code class=\\\"language-text\\\">source /opt/ros/lunar/setup.bash</code> as is told in the official document, go to your <code class=\\\"language-text\\\">~/.config/fish/config.fish</code> file (which is essentially <code class=\\\"language-text\\\">.bashrc</code> for bash), add the following line:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">source</span> /opt/ros/kinetic/share/rosbash/rosfish</code></pre>\\n      </div>\\n<h2>Sourcing catkin workspace</h2>\\n<p>To source your workspace, you can’t just source the file in <code class=\\\"language-text\\\">devel/setup.bash</code> since it’s written in shell script that fish do not understand. Instead, install <a href=\\\"https://github.com/edc/bass\\\">bass</a> as a bridge between fish and shell script. I recommend using <a href=\\\"https://github.com/fisherman/fisherman\\\">fisherman</a> for installing bass. </p>\\n<p>Now every time you need to source your workspace, run this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">bass <span class=\\\"token function\\\">source</span> devel/setup.bash</code></pre>\\n      </div>\\n<h3>I’m lazy. Is there a easier way?</h3>\\n<p>I got you. Why sourcing scripts manually when everything can be automated? Let’s use fish’s excellent hook functionality to source the files for us.</p>\\n<p>Place the following file in <code class=\\\"language-text\\\">~/.config/fish/conf.d</code>, you can name it <code class=\\\"language-text\\\">catkin.autosource.fish</code> or whatever</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token keyword\\\">function</span> catkinSource --on-variable PWD\\n    status --is-command-substitution<span class=\\\"token punctuation\\\">;</span> and <span class=\\\"token keyword\\\">return</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token function\\\">test</span> -e <span class=\\\"token string\\\">\\\".catkin_workspace\\\"</span>\\n        bass <span class=\\\"token function\\\">source</span> devel/setup.bash\\n        <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">\\\"Configured the folder as a workspace\\\"</span>\\n    end\\nend</code></pre>\\n      </div>\\n<p>The script monitor the variable <code class=\\\"language-text\\\">PWD</code>, which is the location you’re at, if it changes, search for the <code class=\\\"language-text\\\">.catkin_workspace</code> file (which in the workspace when you create it). If it finds the file, the source it for you.</p>\\n<p>Happy fishing!</p>\",\"fields\":{\"tagSlugs\":[\"/tags/fish/\",\"/tags/ros/\"],\"date\":\"2017-11-20T01:42:21.000Z\"},\"frontmatter\":{\"title\":\"How to let ROS play happily with fish\",\"tags\":[\"fish\",\"ROS\"],\"date\":\"2017-11-20T01:42:21.000Z\",\"description\":\"Make ROS and fish shell great again.\"}}},\"pathContext\":{\"slug\":\"/articles/How-to-let-ROS-play-happily-with-fish/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-how-to-let-ros-play-happily-with-fish-fd59f178087697bed9fa.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Yanda's Lab\",\"subtitle\":\"The existence of this blog fills you with determination.\",\"author\":{\"name\":\"Yanda Huang\"},\"disqusShortname\":\"\",\"url\":\"https://yanda.rocks\"}},\"markdownRemark\":{\"id\":\"/home/yanda/Development/yodahuang.github.io/src/pages/articles/2017-11-20---How-to-let-ROS-play-happily-with-fish/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><code class=\\\"language-text\\\">ROS</code> is a common platform for robot development. Normally it has some descent document, but not for <a href=\\\"http://wiki.ros.org/rosbash\\\">rosbash</a>. It is stated in the document that</p>\\n<blockquote>\\n<p>The <code class=\\\"language-text\\\">rosbash</code> package includes limited support for <code class=\\\"language-text\\\">zsh</code> and <code class=\\\"language-text\\\">tcsh</code> by way of sourcing the <code class=\\\"language-text\\\">roszsh</code> or <code class=\\\"language-text\\\">rostcsh</code> files respectively. We currently do not provide documentation on these shells, though much of the functionality is similar to the bash shell extensions.</p>\\n</blockquote>\\n<p>What if I want to use <a href=\\\"https://fishshell.com\\\">fish shell</a> instead of <code class=\\\"language-text\\\">bash</code>?  There is a file called <code class=\\\"language-text\\\">rosfish</code> <a href=\\\"https://github.com/ros/ros/blob/lunar-devel/tools/rosbash/rosfish\\\">in Github</a> but how to use that?</p>\\n<h2>Getting functionalities such as <code class=\\\"language-text\\\">roscd</code> and <code class=\\\"language-text\\\">rosed</code></h2>\\n<p>Instead of sourcing <code class=\\\"language-text\\\">source /opt/ros/lunar/setup.bash</code> as is told in the official document, go to your <code class=\\\"language-text\\\">~/.config/fish/config.fish</code> file (which is essentially <code class=\\\"language-text\\\">.bashrc</code> for bash), add the following line:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">source</span> /opt/ros/kinetic/share/rosbash/rosfish</code></pre>\\n      </div>\\n<h2>Sourcing catkin workspace</h2>\\n<p>To source your workspace, you can’t just source the file in <code class=\\\"language-text\\\">devel/setup.bash</code> since it’s written in shell script that fish do not understand. Instead, install <a href=\\\"https://github.com/edc/bass\\\">bass</a> as a bridge between fish and shell script. I recommend using <a href=\\\"https://github.com/fisherman/fisherman\\\">fisherman</a> for installing bass. </p>\\n<p>Now every time you need to source your workspace, run this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">bass <span class=\\\"token function\\\">source</span> devel/setup.bash</code></pre>\\n      </div>\\n<h3>I’m lazy. Is there a easier way?</h3>\\n<p>I got you. Why sourcing scripts manually when everything can be automated? Let’s use fish’s excellent hook functionality to source the files for us.</p>\\n<p>Place the following file in <code class=\\\"language-text\\\">~/.config/fish/conf.d</code>, you can name it <code class=\\\"language-text\\\">catkin.autosource.fish</code> or whatever</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token keyword\\\">function</span> catkinSource --on-variable PWD\\n    status --is-command-substitution<span class=\\\"token punctuation\\\">;</span> and <span class=\\\"token keyword\\\">return</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token function\\\">test</span> -e <span class=\\\"token string\\\">\\\".catkin_workspace\\\"</span>\\n        bass <span class=\\\"token function\\\">source</span> devel/setup.bash\\n        <span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">\\\"Configured the folder as a workspace\\\"</span>\\n    end\\nend</code></pre>\\n      </div>\\n<p>The script monitor the variable <code class=\\\"language-text\\\">PWD</code>, which is the location you’re at, if it changes, search for the <code class=\\\"language-text\\\">.catkin_workspace</code> file (which in the workspace when you create it). If it finds the file, the source it for you.</p>\\n<p>Happy fishing!</p>\",\"fields\":{\"tagSlugs\":[\"/tags/fish/\",\"/tags/ros/\"],\"date\":\"2017-11-20T01:42:21.000Z\"},\"frontmatter\":{\"title\":\"How to let ROS play happily with fish\",\"tags\":[\"fish\",\"ROS\"],\"date\":\"2017-11-20T01:42:21.000Z\",\"description\":\"Make ROS and fish shell great again.\"}}},\"pathContext\":{\"slug\":\"/articles/How-to-let-ROS-play-happily-with-fish/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-how-to-let-ros-play-happily-with-fish.json\n// module id = 429\n// module chunks = 62247893990589"],"sourceRoot":""}