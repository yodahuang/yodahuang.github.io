{"version":3,"sources":["webpack:///path---articles-how-to-build-open-rave-0-9-yourself-0828dca8ab6deb5fd941.js","webpack:///./.cache/json/articles-how-to-build-open-rave-0-9-yourself.json"],"names":["webpackJsonp","428","module","exports","data","site","siteMetadata","title","subtitle","author","name","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","date","frontmatter","tags","description","pathContext","slug"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,2DAAAC,QAAsGC,KAAA,eAAqBC,gBAAA,GAAAC,IAAA,wBAAmDC,gBAAmBC,GAAA,6JAAAC,KAAA,gwLAAwkGC,QAA4hGC,UAAA,mBAAAC,KAAA,4BAAiEC,aAAgBZ,MAAA,qCAAAa,MAAA,YAAAF,KAAA,2BAAAG,YAAA,qGAAqNC,aAAgBC,KAAA","file":"path---articles-how-to-build-open-rave-0-9-yourself-0828dca8ab6deb5fd941.js","sourcesContent":["webpackJsonp([9529078761303],{\n\n/***/ 428:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Yanda's Lab\",\"subtitle\":\"The existence of this blog fills you with determination.\",\"author\":{\"name\":\"Yanda Huang\"},\"disqusShortname\":\"\",\"url\":\"https://yanda.rocks\"}},\"markdownRemark\":{\"id\":\"/home/yanda/Development/yodahuang.github.io/src/pages/articles/2018-01-24---How-to-Build-OpenRave-0.9-Yourself/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Overview</h2>\\n<p>This blog covers instruction of how to build <a href=\\\"https://github.com/personalrobotics/openrave\\\">OpenRave 0.9 from Personal Robotics Lab</a> yourself on a Ubuntu Xenial (16.04) machine since the binary is not provided. The instruction is made by guessing and trying, so there might be some little bugs. I’m too lazy to write a shell script to do all of the things, so just get your hands dirty and follow it step by step.</p>\\n<h2>Before you start</h2>\\n<p>Make sure your Python is the one that comes with the system, which should be the case for most of the people. If you are a person like me who uses the fantastic <a href=\\\"https://github.com/pyenv/pyenv\\\">pyenv</a>, just run <code class=\\\"language-text\\\">pyenv shell system</code>.</p>\\n<h2>Get dependencies</h2>\\n<ul>\\n<li>Add <code class=\\\"language-text\\\">usr/local/bin</code> to your <code class=\\\"language-text\\\">$PATH</code></li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">\\\"export PATH=<span class=\\\"token variable\\\">$PATH</span>:/usr/local/bin\\\"</span>\\\" <span class=\\\"token operator\\\">>></span> ~/.bashrc</code></pre>\\n      </div>\\n<p>If you’re using <code class=\\\"language-text\\\">fish</code>, you can just run <code class=\\\"language-text\\\">set -U fish_user_paths /usr/local/bin $fish_user_paths</code> instead.</p>\\n<ul>\\n<li>Get <a href=\\\"https://bitbucket.org/Coin3D/coin/downloads/Coin-3.1.3.tar.gz\\\">Coin3D</a>. Unzip it.</li>\\n<li>Go inside the folder, run <code class=\\\"language-text\\\">./configure</code></li>\\n<li>To solve potential compilation issues, change the following:</li>\\n<li>\\n<p>File <code class=\\\"language-text\\\">include/Inventor/SbBasic.h</code>, add in line 26:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;Inventor/C/errors/debugerror.h></span></span></code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>File “src/fonts/freetype.cpp”, add in line 50:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;cstdlib></span></span></code></pre>\\n      </div>\\n<p>The code in this lines will be:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">ifdef</span> __cplusplus</span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;cstdlib></span></span>\\n<span class=\\\"token keyword\\\">extern</span> <span class=\\\"token string\\\">\\\"C\\\"</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">endif</span> </span><span class=\\\"token comment\\\">/* __cplusplus */</span><span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n</li>\\n<li>then run <code class=\\\"language-text\\\">make</code>, then <code class=\\\"language-text\\\">sudo make install</code></li>\\n<li>Get <a href=\\\"https://bitbucket.org/Coin3D/coin/downloads/SoXt-1.3.0.tar.gz\\\">SoXt</a>. Unzip it.</li>\\n<li>Go inside the folder, run <code class=\\\"language-text\\\">./configure</code>, then run <code class=\\\"language-text\\\">make</code>, then <code class=\\\"language-text\\\">sudo make install</code></li>\\n<li>\\n<p>Install ODE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># ode - Will need to install ODE from sources (do not use the one in the package manager)</span>\\n<span class=\\\"token function\\\">wget</span> https://downloads.sourceforge.net/project/opende/ODE/0.11.1/ode-0.11.1.tar.bz2\\n<span class=\\\"token function\\\">tar</span> xjf ode-0.11.1.tar.bz2\\n<span class=\\\"token function\\\">cd</span> ode-0.11.1\\n./configure --with-libccd<span class=\\\"token operator\\\">=</span>cyl-cyl --with-trimesh<span class=\\\"token operator\\\">=</span>opcode --enable-new-trimesh --disable-demos --enable-shared --with-arch<span class=\\\"token operator\\\">=</span>nocona --enable-release --enable-malloc --enable-ou --disable-asserts --with-pic --enable-double-precision\\n<span class=\\\"token function\\\">make</span> -j4\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">make</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n</li>\\n<li>Install Python dependencies: <code class=\\\"language-text\\\">sudo apt-get install libboost-python-dev python python-dev python-numpy ipython python-scipy</code></li>\\n</ul>\\n<h2>Build <code class=\\\"language-text\\\">openrave</code></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">git</span> clone git@github.com:personalrobotics/openrave.git\\n<span class=\\\"token function\\\">cd</span> openrave\\n<span class=\\\"token function\\\">make</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n<p>Then add the <code class=\\\"language-text\\\">OPENRAVE_DATA</code> variable to your <code class=\\\"language-text\\\">bashrc</code>, note here the directory includes a <code class=\\\"language-text\\\">/local</code> part.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">\\\"export OPENRAVE_DATA=/usr/local/share/openrave-0.9/data/\\\"</span> <span class=\\\"token operator\\\">>></span> ~/.bashrc</code></pre>\\n      </div>\\n<p>If you’re using other shells such as <code class=\\\"language-text\\\">zsh</code> or <code class=\\\"language-text\\\">fish</code>, I think you know what to do.</p>\\n<hr>\\n<p>Happy OpenRaving!</p>\",\"fields\":{\"tagSlugs\":[\"/tags/openrave/\"],\"date\":\"2018-01-24T22:34:32.000Z\"},\"frontmatter\":{\"title\":\"How to Build OpenRave 0.9 Yourself\",\"tags\":[\"openrave\"],\"date\":\"2018-01-24T22:34:32.000Z\",\"description\":\"Building OpenRave yourself is always a pain. This blog covers how to build it on Ubuntu Xenial.\"}}},\"pathContext\":{\"slug\":\"/articles/How-to-Build-OpenRave-0.9-Yourself/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-how-to-build-open-rave-0-9-yourself-0828dca8ab6deb5fd941.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Yanda's Lab\",\"subtitle\":\"The existence of this blog fills you with determination.\",\"author\":{\"name\":\"Yanda Huang\"},\"disqusShortname\":\"\",\"url\":\"https://yanda.rocks\"}},\"markdownRemark\":{\"id\":\"/home/yanda/Development/yodahuang.github.io/src/pages/articles/2018-01-24---How-to-Build-OpenRave-0.9-Yourself/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Overview</h2>\\n<p>This blog covers instruction of how to build <a href=\\\"https://github.com/personalrobotics/openrave\\\">OpenRave 0.9 from Personal Robotics Lab</a> yourself on a Ubuntu Xenial (16.04) machine since the binary is not provided. The instruction is made by guessing and trying, so there might be some little bugs. I’m too lazy to write a shell script to do all of the things, so just get your hands dirty and follow it step by step.</p>\\n<h2>Before you start</h2>\\n<p>Make sure your Python is the one that comes with the system, which should be the case for most of the people. If you are a person like me who uses the fantastic <a href=\\\"https://github.com/pyenv/pyenv\\\">pyenv</a>, just run <code class=\\\"language-text\\\">pyenv shell system</code>.</p>\\n<h2>Get dependencies</h2>\\n<ul>\\n<li>Add <code class=\\\"language-text\\\">usr/local/bin</code> to your <code class=\\\"language-text\\\">$PATH</code></li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">\\\"export PATH=<span class=\\\"token variable\\\">$PATH</span>:/usr/local/bin\\\"</span>\\\" <span class=\\\"token operator\\\">>></span> ~/.bashrc</code></pre>\\n      </div>\\n<p>If you’re using <code class=\\\"language-text\\\">fish</code>, you can just run <code class=\\\"language-text\\\">set -U fish_user_paths /usr/local/bin $fish_user_paths</code> instead.</p>\\n<ul>\\n<li>Get <a href=\\\"https://bitbucket.org/Coin3D/coin/downloads/Coin-3.1.3.tar.gz\\\">Coin3D</a>. Unzip it.</li>\\n<li>Go inside the folder, run <code class=\\\"language-text\\\">./configure</code></li>\\n<li>To solve potential compilation issues, change the following:</li>\\n<li>\\n<p>File <code class=\\\"language-text\\\">include/Inventor/SbBasic.h</code>, add in line 26:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;Inventor/C/errors/debugerror.h></span></span></code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>File “src/fonts/freetype.cpp”, add in line 50:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;cstdlib></span></span></code></pre>\\n      </div>\\n<p>The code in this lines will be:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">ifdef</span> __cplusplus</span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">include</span> <span class=\\\"token string\\\">&lt;cstdlib></span></span>\\n<span class=\\\"token keyword\\\">extern</span> <span class=\\\"token string\\\">\\\"C\\\"</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token macro property\\\">#<span class=\\\"token directive keyword\\\">endif</span> </span><span class=\\\"token comment\\\">/* __cplusplus */</span><span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n</li>\\n<li>then run <code class=\\\"language-text\\\">make</code>, then <code class=\\\"language-text\\\">sudo make install</code></li>\\n<li>Get <a href=\\\"https://bitbucket.org/Coin3D/coin/downloads/SoXt-1.3.0.tar.gz\\\">SoXt</a>. Unzip it.</li>\\n<li>Go inside the folder, run <code class=\\\"language-text\\\">./configure</code>, then run <code class=\\\"language-text\\\">make</code>, then <code class=\\\"language-text\\\">sudo make install</code></li>\\n<li>\\n<p>Install ODE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># ode - Will need to install ODE from sources (do not use the one in the package manager)</span>\\n<span class=\\\"token function\\\">wget</span> https://downloads.sourceforge.net/project/opende/ODE/0.11.1/ode-0.11.1.tar.bz2\\n<span class=\\\"token function\\\">tar</span> xjf ode-0.11.1.tar.bz2\\n<span class=\\\"token function\\\">cd</span> ode-0.11.1\\n./configure --with-libccd<span class=\\\"token operator\\\">=</span>cyl-cyl --with-trimesh<span class=\\\"token operator\\\">=</span>opcode --enable-new-trimesh --disable-demos --enable-shared --with-arch<span class=\\\"token operator\\\">=</span>nocona --enable-release --enable-malloc --enable-ou --disable-asserts --with-pic --enable-double-precision\\n<span class=\\\"token function\\\">make</span> -j4\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">make</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n</li>\\n<li>Install Python dependencies: <code class=\\\"language-text\\\">sudo apt-get install libboost-python-dev python python-dev python-numpy ipython python-scipy</code></li>\\n</ul>\\n<h2>Build <code class=\\\"language-text\\\">openrave</code></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">git</span> clone git@github.com:personalrobotics/openrave.git\\n<span class=\\\"token function\\\">cd</span> openrave\\n<span class=\\\"token function\\\">make</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token function\\\">install</span></code></pre>\\n      </div>\\n<p>Then add the <code class=\\\"language-text\\\">OPENRAVE_DATA</code> variable to your <code class=\\\"language-text\\\">bashrc</code>, note here the directory includes a <code class=\\\"language-text\\\">/local</code> part.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string\\\">\\\"export OPENRAVE_DATA=/usr/local/share/openrave-0.9/data/\\\"</span> <span class=\\\"token operator\\\">>></span> ~/.bashrc</code></pre>\\n      </div>\\n<p>If you’re using other shells such as <code class=\\\"language-text\\\">zsh</code> or <code class=\\\"language-text\\\">fish</code>, I think you know what to do.</p>\\n<hr>\\n<p>Happy OpenRaving!</p>\",\"fields\":{\"tagSlugs\":[\"/tags/openrave/\"],\"date\":\"2018-01-24T22:34:32.000Z\"},\"frontmatter\":{\"title\":\"How to Build OpenRave 0.9 Yourself\",\"tags\":[\"openrave\"],\"date\":\"2018-01-24T22:34:32.000Z\",\"description\":\"Building OpenRave yourself is always a pain. This blog covers how to build it on Ubuntu Xenial.\"}}},\"pathContext\":{\"slug\":\"/articles/How-to-Build-OpenRave-0.9-Yourself/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-how-to-build-open-rave-0-9-yourself.json\n// module id = 428\n// module chunks = 9529078761303"],"sourceRoot":""}