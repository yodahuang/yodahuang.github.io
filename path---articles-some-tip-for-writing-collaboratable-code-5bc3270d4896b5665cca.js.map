{"version":3,"sources":["webpack:///path---articles-some-tip-for-writing-collaboratable-code-5bc3270d4896b5665cca.js","webpack:///./.cache/json/articles-some-tip-for-writing-collaboratable-code.json"],"names":["webpackJsonp","431","module","exports","data","site","siteMetadata","title","subtitle","author","name","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","date","frontmatter","tags","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,2DAAAC,QAAsGC,KAAA,eAAqBC,gBAAA,GAAAC,IAAA,wBAAmDC,gBAAmBC,GAAA,mKAAAC,KAAA,4wEAAkoEC,QAAiVC,SAAA,KAAAC,KAAA,4BAAkDC,aAAgBZ,MAAA,2CAAAa,KAAA,KAAAF,KAAA,2BAAAG,YAAA,yFAAuMC,aAAgBC,KAAA","file":"path---articles-some-tip-for-writing-collaboratable-code-5bc3270d4896b5665cca.js","sourcesContent":["webpackJsonp([112308597091874],{\n\n/***/ 431:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Yanda's Lab\",\"subtitle\":\"The existence of this blog fills you with determination.\",\"author\":{\"name\":\"Yanda Huang\"},\"disqusShortname\":\"\",\"url\":\"https://yanda.rocks\"}},\"markdownRemark\":{\"id\":\"/home/yanda/Development/yodahuang.github.io/src/pages/articles/2018-04-27---Some-tip-for-writing-collaboratable-code/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Coding style and proper use of version management tool are usually not considered a big deal in academic environment. However, if you are to collaborate as a group on some code, it’s better to take these into consideration. Reading toxic code in the morning can easily drain all of my energy the whole day.</p>\\n<ul>\\n<li>Always have <strong>up-to-date</strong> document describing what you have done. Ideally there should be a <code class=\\\"language-text\\\">README</code> describing high level concepts and APIs. In the code there should be docstrings and helpful tips here and there.</li>\\n<li>Use comment for describing extra details, not for temporarily commenting out code. You have version control for recovering old code.</li>\\n<li>Delete all the unnecessary files. Figuring out there’re 20 files in the repository and only 2 of them are actually used and all the others are legacy files is not a good experience. You have version control for recovering old files.</li>\\n<li>Laying out the files in a structured way. For example, put images in the <code class=\\\"language-text\\\">/imgs</code> folder instead of letting it floating everywhere</li>\\n<li>If using git as version control tool, commit every time when you add a new feature or fix some bugs. Do not put everything in a commit. This makes debugging hard since it’s not easy to revert it.</li>\\n<li>Write useful commit messages. For example, which parameter is changed and why</li>\\n<li>Never use <code class=\\\"language-text\\\">git add --all</code> or <code class=\\\"language-text\\\">git add .</code>. Put random generated files in <code class=\\\"language-text\\\">.gitignore</code>, such as <code class=\\\"language-text\\\">.DS_Store</code> or <code class=\\\"language-text\\\">__pycache__</code></li>\\n<li>Look at other’s commit and take some time studying what they are doing.</li>\\n<li>Spend some time for how to write Markdown and how to use Git. It’s <strong>not hard</strong>, if you are not <strong>too busy</strong></li>\\n</ul>\\n<h2>Q&#x26;A</h2>\\n<ul>\\n<li>\\n<p>My code works, since it works it’s good. Why do I need to consider something else? </p>\\n<ul>\\n<li>By spending some time on your side can saving your teammate a huge amount of time on their end. Just do them a flavor. your teammate will appreciate you for eliminating headache</li>\\n</ul>\\n</li>\\n</ul>\",\"fields\":{\"tagSlugs\":null,\"date\":\"2018-04-27T20:06:29.000Z\"},\"frontmatter\":{\"title\":\"Some tip for writing collaboratable code\",\"tags\":null,\"date\":\"2018-04-27T20:06:29.000Z\",\"description\":\"What are some things to keep in mind when you are going to collaborate with others?\"}}},\"pathContext\":{\"slug\":\"/articles/Some-tip-for-writing-collaboratable-code/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-some-tip-for-writing-collaboratable-code-5bc3270d4896b5665cca.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Yanda's Lab\",\"subtitle\":\"The existence of this blog fills you with determination.\",\"author\":{\"name\":\"Yanda Huang\"},\"disqusShortname\":\"\",\"url\":\"https://yanda.rocks\"}},\"markdownRemark\":{\"id\":\"/home/yanda/Development/yodahuang.github.io/src/pages/articles/2018-04-27---Some-tip-for-writing-collaboratable-code/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Coding style and proper use of version management tool are usually not considered a big deal in academic environment. However, if you are to collaborate as a group on some code, it’s better to take these into consideration. Reading toxic code in the morning can easily drain all of my energy the whole day.</p>\\n<ul>\\n<li>Always have <strong>up-to-date</strong> document describing what you have done. Ideally there should be a <code class=\\\"language-text\\\">README</code> describing high level concepts and APIs. In the code there should be docstrings and helpful tips here and there.</li>\\n<li>Use comment for describing extra details, not for temporarily commenting out code. You have version control for recovering old code.</li>\\n<li>Delete all the unnecessary files. Figuring out there’re 20 files in the repository and only 2 of them are actually used and all the others are legacy files is not a good experience. You have version control for recovering old files.</li>\\n<li>Laying out the files in a structured way. For example, put images in the <code class=\\\"language-text\\\">/imgs</code> folder instead of letting it floating everywhere</li>\\n<li>If using git as version control tool, commit every time when you add a new feature or fix some bugs. Do not put everything in a commit. This makes debugging hard since it’s not easy to revert it.</li>\\n<li>Write useful commit messages. For example, which parameter is changed and why</li>\\n<li>Never use <code class=\\\"language-text\\\">git add --all</code> or <code class=\\\"language-text\\\">git add .</code>. Put random generated files in <code class=\\\"language-text\\\">.gitignore</code>, such as <code class=\\\"language-text\\\">.DS_Store</code> or <code class=\\\"language-text\\\">__pycache__</code></li>\\n<li>Look at other’s commit and take some time studying what they are doing.</li>\\n<li>Spend some time for how to write Markdown and how to use Git. It’s <strong>not hard</strong>, if you are not <strong>too busy</strong></li>\\n</ul>\\n<h2>Q&#x26;A</h2>\\n<ul>\\n<li>\\n<p>My code works, since it works it’s good. Why do I need to consider something else? </p>\\n<ul>\\n<li>By spending some time on your side can saving your teammate a huge amount of time on their end. Just do them a flavor. your teammate will appreciate you for eliminating headache</li>\\n</ul>\\n</li>\\n</ul>\",\"fields\":{\"tagSlugs\":null,\"date\":\"2018-04-27T20:06:29.000Z\"},\"frontmatter\":{\"title\":\"Some tip for writing collaboratable code\",\"tags\":null,\"date\":\"2018-04-27T20:06:29.000Z\",\"description\":\"What are some things to keep in mind when you are going to collaborate with others?\"}}},\"pathContext\":{\"slug\":\"/articles/Some-tip-for-writing-collaboratable-code/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-some-tip-for-writing-collaboratable-code.json\n// module id = 431\n// module chunks = 112308597091874"],"sourceRoot":""}